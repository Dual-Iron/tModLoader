--- src/decompiled/Terraria/Audio/SoundEngine.cs
+++ src/Terraria/Terraria/Audio/SoundEngine.cs
@@ -8,6 +_,7 @@
 {
 	public static class SoundEngine
 	{
+		public static readonly object AudioLock = new object();
 		private static LegacySoundPlayer _legacyPlayer;
 		private static SoundPlayer _player;
 		private static bool _areSoundsPaused;
@@ -69,31 +_,52 @@
 		}
 
 		public static SoundEffectInstance PlaySound(int type, int x = -1, int y = -1, int Style = 1, float volumeScale = 1f, float pitchOffset = 0f) {
+			if (Main.dedServ)
+			return null;
+
 			if (!IsAudioSupported)
 				return null;
 
+#if FNA
+			lock(AudioLock)
+#endif
-			return _legacyPlayer.PlaySound(type, x, y, Style, volumeScale, pitchOffset);
+				return _legacyPlayer.PlaySound(type, x, y, Style, volumeScale, pitchOffset);
+
 		}
 
 		public static ActiveSound GetActiveSound(SlotId id) {
+			if (Main.dedServ)
+			return null;
+
 			if (!IsAudioSupported)
 				return null;
 
 			return _player.GetActiveSound(id);
+
 		}
 
-		public static SlotId PlayTrackedSound(SoundStyle style, Vector2 position) {
+		public static SlotId PlayTrackedSound(SoundStyle style, Vector2 position)
+		{
+			if(Main.dedServ)
+			return SlotId.Invalid;
+
 			if (!IsAudioSupported)
 				return SlotId.Invalid;
 
 			return _player.Play(style, position);
+
 		}
 
-		public static SlotId PlayTrackedSound(SoundStyle style) {
+		public static SlotId PlayTrackedSound(SoundStyle style)
+		{
+			if(Main.dedServ)
+			return SlotId.Invalid;
+
 			if (!IsAudioSupported)
 				return SlotId.Invalid;
 
 			return _player.Play(style);
+
 		}
 
 		public static void StopTrackedSounds() {
@@ -102,10 +_,14 @@
 		}
 
 		public static SoundEffect GetTrackableSoundByStyleId(int id) {
+			if(Main.dedServ)
+			return null;
+
 			if (!IsAudioSupported)
 				return null;
 
 			return _legacyPlayer.GetTrackableSoundByStyleId(id);
+
 		}
 
 		public static void StopAmbientSounds() {
@@ -114,10 +_,14 @@
 		}
 
 		public static ActiveSound FindActiveSound(SoundStyle style) {
+			if(Main.dedServ)
+			return null;
+
 			if (!IsAudioSupported)
 				return null;
 
 			return _player.FindActiveSound(style);
+
 		}
 
 		private static bool TestAudioSupport() {
