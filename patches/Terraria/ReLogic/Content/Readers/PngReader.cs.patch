--- src/decompiled/ReLogic/Content/Readers/PngReader.cs
+++ src/Terraria/ReLogic/Content/Readers/PngReader.cs
@@ -1,5 +_,6 @@
-using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
+using SixLabors.ImageSharp;
+using SixLabors.ImageSharp.PixelFormats;
 using System;
 using System.IO;
 using System.Threading;
@@ -9,18 +_,19 @@
 	public class PngReader : IAssetReader, IDisposable
 	{
 		private readonly GraphicsDevice _graphicsDevice;
-		private readonly ThreadLocal<Color[]> _colorProcessingCache;
+		private readonly ThreadLocal<Microsoft.Xna.Framework.Color[]> _colorProcessingCache;
 		private bool _disposedValue;
 
 		public PngReader(GraphicsDevice graphicsDevice) {
 			_graphicsDevice = graphicsDevice;
-			_colorProcessingCache = new ThreadLocal<Color[]>();
+			_colorProcessingCache = new ThreadLocal<Microsoft.Xna.Framework.Color[]>();
 		}
 
 		public T FromStream<T>(Stream stream) where T : class {
 			if (typeof(T) != typeof(Texture2D))
 				throw AssetLoadException.FromInvalidReader<PngReader, T>();
 
+#if !NETCORE
 			Texture2D texture2D = Texture2D.FromStream(_graphicsDevice, stream);
 			int num = texture2D.Width * texture2D.Height;
 			if (!_colorProcessingCache.IsValueCreated || _colorProcessingCache.Value.Length < num)
@@ -34,6 +_,15 @@
 
 			texture2D.SetData(value, 0, num);
 			return texture2D as T;
+#else
+			var img = Image.Load(stream);
+			Image<Rgba32> bmp = img.CloneAs<Rgba32>();
+			bmp.TryGetSinglePixelSpan(out Span<Rgba32> colors);
+
+			Texture2D texture2D = new Texture2D(_graphicsDevice, bmp.Width, bmp.Height);
+			texture2D.SetData(colors.ToArray());
+			return texture2D as T;
+#endif
 		}
 
 		protected virtual void Dispose(bool disposing) {
@@ -48,5 +_,7 @@
 		public void Dispose() {
 			Dispose(disposing: true);
 		}
+
+		public Type[] GetAssociatedTypes() => new[] { typeof(Texture2D) };
 	}
 }
