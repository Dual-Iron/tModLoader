--- src/Terraria/ReLogic/Content/Sources/XnaContentSource.cs
+++ src/tModLoader/ReLogic/Content/Sources/XnaContentSource.cs
@@ -2,74 +_,14 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 
 namespace ReLogic.Content.Sources
 {
-	public class XnaContentSource : IContentSource
+	public class XnaContentSource : XnaDirectContentSource
 	{
-		private readonly string _rootDirectory;
-		private readonly HashSet<string> _files = new HashSet<string>();
-		private readonly RejectedAssetCollection _rejections = new RejectedAssetCollection();
-
-		public IContentValidator ContentValidator {
-			get;
-			set;
-		}
-
-		public XnaContentSource(string rootDirectory) {
-			_rootDirectory = AssetPathHelper.CleanPath(rootDirectory);
-			BuildFileMap();
-		}
-
-		private void BuildFileMap() {
-			_files.Clear();
-			string[] files = Directory.GetFiles(_rootDirectory, "*.xnb", SearchOption.AllDirectories);
-			foreach (string text in files) {
-				_files.Add(text.ToLower());
-			}
-		}
-
-		public bool HasAsset(string assetName) {
-			string text = Path.Combine(_rootDirectory, assetName) + ".xnb";
-			if (_rejections.IsRejected(assetName))
-				return false;
-
-			return _files.Contains(text.ToLower());
-		}
-
-		public string GetExtension(string assetName) => ".xnb";
-
-		public Stream OpenStream(string assetName) {
-			string name = Path.Combine(_rootDirectory, assetName) + ".xnb";
-			try {
-				return TitleContainer.OpenStream(name);
-			}
-			catch (Exception innerException) {
-				throw AssetLoadException.FromMissingAsset(assetName, innerException);
-			}
-		}
-
-		public static string GetTitleLocationPath() {
-			string result = string.Empty;
-			Assembly assembly = Assembly.GetEntryAssembly();
-			if (assembly == null)
-				assembly = Assembly.GetCallingAssembly();
-
-			if (assembly != null)
-				result = Path.GetDirectoryName(assembly.Location);
-
-			return result;
-		}
-
-		public void RejectAsset(string assetName, IRejectionReason reason) {
-			_rejections.Reject(assetName, reason);
-		}
-
-		public void ClearRejections() {
-			_rejections.Clear();
-		}
-
-		public bool TryGetRejections(List<string> rejectionReasons) => _rejections.TryGetRejections(rejectionReasons);
+		public XnaContentSource(string rootDirectory) : base(rootDirectory) {
+		}
 	}
 }
