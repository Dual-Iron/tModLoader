--- src/Terraria/ReLogic/Content/Readers/PngReader.cs
+++ src/tModLoader/ReLogic/Content/Readers/PngReader.cs
@@ -21,6 +_,7 @@
 			if (typeof(T) != typeof(Texture2D))
 				throw AssetLoadException.FromInvalidReader<PngReader, T>();
 
+#if !NETCORE
 			Texture2D texture2D = Texture2D.FromStream(_graphicsDevice, stream);
 			int num = texture2D.Width * texture2D.Height;
 			if (!_colorProcessingCache.IsValueCreated || _colorProcessingCache.Value.Length < num)
@@ -34,6 +_,23 @@
 
 			texture2D.SetData(value, 0, num);
 			return texture2D as T;
+#else
+			// Screw off FNA, let the big boys handle this one
+			throw new NotImplementedException("System.Drawing isn't crossplatform on NetCore");
+			/*
+			using var bmp = new D.Bitmap(stream);
+			var colors = new Color[bmp.Width * bmp.Height];
+			for (int i = 0; i < bmp.Width; i++) {
+				for (int j = 0; j < bmp.Height; j ++) {
+					var color = bmp.GetPixel(i, j);
+					colors[i + j * bmp.Width] = new Color(color.R, color.G, color.B, color.A);
+				}
+			}
+
+			Texture2D texture2D = new Texture2D(_graphicsDevice, bmp.Width, bmp.Height);
+			texture2D.SetData(colors);
+			*/
+#endif
 		}
 
 		protected virtual void Dispose(bool disposing) {
@@ -48,5 +_,7 @@
 		public void Dispose() {
 			Dispose(disposing: true);
 		}
+
+		public Type[] GetAssociatedTypes() => new[] { typeof(Texture2D) };
 	}
 }
