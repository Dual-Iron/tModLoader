--- src/Terraria/Terraria/MonoLaunch.cs
+++ src/tModLoader/Terraria/MonoLaunch.cs
@@ -3,13 +_,18 @@
 using System.IO;
 using System.Reflection;
 using Terraria;
+using System.Runtime.InteropServices;
+using System.Collections.Generic;
 
 internal static class MonoLaunch
 {
 	private static void Main(string[] args) {
 		AppDomain.CurrentDomain.AssemblyResolve += delegate (object sender, ResolveEventArgs sargs) {
-			string resourceName = new AssemblyName(sargs.Name).Name + ".dll";
-			string text = Array.Find(typeof(Program).Assembly.GetManifestResourceNames(), (string element) => element.EndsWith(resourceName));
+			string name = new AssemblyName(sargs.Name).Name;
+			if (name == "Terraria")
+				return Assembly.GetExecutingAssembly();
+
+			string text = Array.Find(typeof(Program).Assembly.GetManifestResourceNames(), (string element) => element.EndsWith(name + ".dll"));
 			if (text == null)
 				return null;
 
@@ -20,8 +_,27 @@
 			}
 		};
 
+		NativeLibrary.SetDllImportResolver(typeof(Game).Assembly, (name, assembly, searchPath) => {
+			try {
+				if (assemblies.TryGetValue(name, out var handle)) {
+					return handle;
+				}
+				var files = Directory.GetFiles(Environment.CurrentDirectory, name + "*");
+				var match = files.FirstOrDefault(s => File.Exists(s));
+				if (match != null && NativeLibrary.TryLoad(match, out handle)) {
+					return assemblies[name] = handle;
+				}
+				return assemblies[name] = IntPtr.Zero;
+			}
+			catch (DirectoryNotFoundException e) {
+				throw new DirectoryNotFoundException("A needed library file was missing from the tModLoader directory. " + e.Message, e);
+			}
+		});
+
 		Environment.SetEnvironmentVariable("FNA_WORKAROUND_WINDOW_RESIZABLE", "1");
 		Program.LaunchGame(args, monoArgs: true);
 	}
+
+	private static Dictionary<string, IntPtr> assemblies = new Dictionary<string, IntPtr>();
 }
 #endif
