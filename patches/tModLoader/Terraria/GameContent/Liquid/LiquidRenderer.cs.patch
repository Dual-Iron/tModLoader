--- src/Terraria/Terraria/GameContent/Liquid/LiquidRenderer.cs
+++ src/tModLoader/Terraria/GameContent/Liquid/LiquidRenderer.cs
@@ -77,7 +_,7 @@
 		};
 		public const float MIN_LIQUID_SIZE = 0.25f;
 		public static LiquidRenderer Instance;
-		private readonly Asset<Texture2D>[] _liquidTextures = new Asset<Texture2D>[13];
+		public Asset<Texture2D>[] _liquidTextures = new Asset<Texture2D>[13];
 		private LiquidCache[] _cache = new LiquidCache[1];
 		private LiquidDrawCache[] _drawCache = new LiquidDrawCache[1];
 		private int _animationFrame;
@@ -86,7 +_,7 @@
 		private Color[] _waveMask = new Color[1];
 		private float _frameState;
 
-		private static Tile[,] Tiles => Main.tile;
+		//private static Tile[,] Tiles => Main.tile;
 
 		public event Action<Color[], Rectangle> WaveFilters;
 
@@ -96,11 +_,12 @@
 		}
 
 		private void PrepareAssets() {
-#if CLIENT
+			if (Main.dedServ)
+				return;
+
 			for (int i = 0; i < _liquidTextures.Length; i++) {
 				_liquidTextures[i] = Main.Assets.Request<Texture2D>("Images/Misc/water_" + i);
 			}
-#endif
 		}
 
 		private unsafe void InternalPrepareDraw(Rectangle drawArea) {
@@ -122,7 +_,7 @@
 				ptr2 = ptr;
 				for (int i = rectangle.X; i < rectangle.X + rectangle.Width; i++) {
 					for (int j = rectangle.Y; j < rectangle.Y + rectangle.Height; j++) {
-						tile = Tiles[i, j];
+						tile = Main.tile[i, j];
 						if (tile == null)
 							tile = new Tile();
 
