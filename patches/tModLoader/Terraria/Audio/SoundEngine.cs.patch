--- src/Terraria/Terraria/Audio/SoundEngine.cs
+++ src/tModLoader/Terraria/Audio/SoundEngine.cs
@@ -9,8 +_,8 @@
 	public static class SoundEngine
 	{
 		public static readonly object AudioLock = new object();
-		private static LegacySoundPlayer _legacyPlayer;
+		internal static LegacySoundPlayer _legacyPlayer;
-		private static SoundPlayer _player;
+		internal static SoundPlayer _player;
 		private static bool _areSoundsPaused;
 
 		public static bool IsAudioSupported {
@@ -70,9 +_,9 @@
 		}
 
 		public static SoundEffectInstance PlaySound(int type, int x = -1, int y = -1, int Style = 1, float volumeScale = 1f, float pitchOffset = 0f) {
-#if SERVER
-			return null;
-#else
+			if (Main.dedServ) {
+				return null;
+			}
 			if (!IsAudioSupported)
 				return null;
 
@@ -80,42 +_,43 @@
 			lock(AudioLock)
 #endif
 				return _legacyPlayer.PlaySound(type, x, y, Style, volumeScale, pitchOffset);
-#endif
 		}
 
 		public static ActiveSound GetActiveSound(SlotId id) {
-#if SERVER
-			return null;
-#else
+			if (Main.dedServ) {
+				return null;
+			}
+			
 			if (!IsAudioSupported)
 				return null;
 
 			return _player.GetActiveSound(id);
-#endif
 		}
 
 		public static SlotId PlayTrackedSound(SoundStyle style, Vector2 position)
 		{
-#if SERVER
+			if (Main.dedServ) {
+				// Red flag, this used to be null, but can't return a null struct
+				return SlotId.Invalid;
+			}
+			
 			return SlotId.Invalid;
-#else
 			if (!IsAudioSupported)
 				return SlotId.Invalid;
 
 			return _player.Play(style, position);
-#endif
 		}
 
 		public static SlotId PlayTrackedSound(SoundStyle style)
 		{
-#if SERVER
-			return SlotId.Invalid;
-#else
+			if (Main.dedServ) {
+				return SlotId.Invalid;
+			}
+
 			if (!IsAudioSupported)
 				return SlotId.Invalid;
 
 			return _player.Play(style);
-#endif
 		}
 
 		public static void StopTrackedSounds() {
@@ -124,14 +_,14 @@
 		}
 
 		public static SoundEffect GetTrackableSoundByStyleId(int id) {
-#if SERVER
-			return null;
-#else
+			if (Main.dedServ) {
+				return null;
+			}
+
 			if (!IsAudioSupported)
 				return null;
 
 			return _legacyPlayer.GetTrackableSoundByStyleId(id);
-#endif
 		}
 
 		public static void StopAmbientSounds() {
@@ -140,14 +_,14 @@
 		}
 
 		public static ActiveSound FindActiveSound(SoundStyle style) {
-#if SERVER
-			return null;
-#else
+			if (Main.dedServ) {
+				return null;
+			}
+
 			if (!IsAudioSupported)
 				return null;
 
 			return _player.FindActiveSound(style);
-#endif
 		}
 
 		private static bool TestAudioSupport() {
