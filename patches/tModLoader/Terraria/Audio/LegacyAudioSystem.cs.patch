--- src/Terraria/Terraria/Audio/LegacyAudioSystem.cs
+++ src/tModLoader/Terraria/Audio/LegacyAudioSystem.cs
@@ -4,6 +_,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
+using Terraria.ModLoader.Engine;
 
 namespace Terraria.Audio
 {
@@ -58,49 +_,52 @@
 		private IAudioTrack FindReplacementTrack(List<IContentSource> sources, string assetPath) {
 			IAudioTrack audioTrack = null;
 			for (int i = 0; i < sources.Count; i++) {
-#if SERVER
+				if (Main.dedServ) {
-				sources[i].HasAsset(assetPath);
+					sources[i].HasAsset(assetPath);
-#else
+				}
+				else {
-				IContentSource contentSource = sources[i];
+					IContentSource contentSource = sources[i];
-				if (!contentSource.HasAsset(assetPath))
+					if (!contentSource.HasAsset(assetPath))
-					continue;
+						continue;
 
-				string extension = contentSource.GetExtension(assetPath);
+					string extension = contentSource.GetExtension(assetPath);
-				try {
+					try {
-					IAudioTrack audioTrack2 = null;
+						IAudioTrack audioTrack2 = null;
-					switch (extension) {
+						switch (extension) {
-						case ".ogg":
+							case ".ogg":
-							audioTrack2 = new OGGAudioTrack(contentSource.OpenStream(assetPath));
+								audioTrack2 = new OGGAudioTrack(contentSource.OpenStream(assetPath));
-							break;
+								break;
-						case ".wav":
+							case ".wav":
-							audioTrack2 = new WAVAudioTrack(contentSource.OpenStream(assetPath));
+								audioTrack2 = new WAVAudioTrack(contentSource.OpenStream(assetPath));
-							break;
+								break;
-						case ".mp3":
+							case ".mp3":
-							audioTrack2 = new MP3AudioTrack(contentSource.OpenStream(assetPath));
+								audioTrack2 = new MP3AudioTrack(contentSource.OpenStream(assetPath));
-							break;
+								break;
-					}
+						}
 
-					if (audioTrack2 != null) {
+						if (audioTrack2 != null) {
-						audioTrack?.Dispose();
+							audioTrack?.Dispose();
-						audioTrack = audioTrack2;
+							audioTrack = audioTrack2;
+						}
 					}
-				}
-				catch {
+					catch {
-					string textToShow = "A resource pack failed to load " + assetPath + "!";
+						string textToShow = "A resource pack failed to load " + assetPath + "!";
-					Main.IssueReporter.AddReport(textToShow);
+						Main.IssueReporter.AddReport(textToShow);
-					Main.IssueReporterIndicator.AttemptLettingPlayerKnow();
+						Main.IssueReporterIndicator.AttemptLettingPlayerKnow();
+					}
 				}
-#endif
 			}
 
 			return audioTrack;
 		}
 
 		public LegacyAudioSystem() {
-			Engine = new AudioEngine("Content\\TerrariaMusic.xgs");
-			SoundBank = new SoundBank(Engine, "Content\\Sound Bank.xsb");
+			var contentManager = (TMLContentManager)Main.instance.Content;
+
+			Engine = new AudioEngine(contentManager.GetPath("TerrariaMusic.xgs"));
+			SoundBank = new SoundBank(Engine, contentManager.GetPath("Sound Bank.xsb"));
 			Engine.Update();
-			WaveBank = new WaveBank(Engine, "Content\\Wave Bank.xwb", 0, 512);
+			WaveBank = new WaveBank(Engine, contentManager.GetPath("Wave Bank.xwb"), 0, 512);
 			Engine.Update();
 			AudioTracks = new IAudioTrack[90];
 			TrackNamesByIndex = new Dictionary<int, string>();
@@ -113,6 +_,8 @@
 				yield return null;
 			}
 		}
+
+		internal Cue GetCueInternal(string cueName) => SoundBank.GetCue(cueName);
 
 		public void LoadCue(int cueIndex, string cueName) {
 			CueAudioTrack cueAudioTrack = new CueAudioTrack(SoundBank, cueName);
